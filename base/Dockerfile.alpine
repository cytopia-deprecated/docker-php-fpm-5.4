# Alpine 3.4 is required to still use OpenSSL instead of LibreSSL
# LibreSSL does not work with PHP 5.4
FROM alpine:3.4
MAINTAINER "cytopia" <cytopia@everythingcli.org>


###
### Labels
###
LABEL \
	name="cytopia's PHP-FPM 5.4 Image" \
	image="php-fpm-5.4" \
	tag="base-alpine" \
	vendor="devilbox" \
	license="MIT"



###
### Build Args
###

# Ref: http://php.net/git.php
ARG BISON_VERSION=2.6.4

# PHP Version
ARG PHP_GIT_TAG=php-5.4

# PHP Configure options
ARG PHP_PREFIX=/usr/local
ARG PHP_CONFIG_FILE_PATH=/usr/local/etc
ARG PHP_CONFIG_FILE_SCAN_DIR=/usr/local/etc/php.d
ARG PHP_MAN_DIR=/usr/local/share/man

# Apply stack smash protection to functions using local buffers and alloca()
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
# Enable optimization (-O2)
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)
# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)
# https://github.com/docker-library/php/issues/272
ARG PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2"
ARG PHP_CPPFLAGS="$PHP_CFLAGS"
ARG PHP_LDFLAGS="-Wl,-O1 -Wl,--hash-style=both -pie"



###
### Envs
###
ENV MY_USER="devilbox" \
	MY_GROUP="devilbox" \
	MY_UID="1000" \
	MY_GID="1000"

ENV BUILD_DEPS \
	autoconf \
	binutils \
	ca-certificates \
	dpkg \
	dpkg-dev \
	file \
	g++ \
	gcc \
	git \
	libc-dev \
	make \
	pkgconf \
	re2c \
	wget

ENV PHP_BUILD_DEPS \
	aspell-dev \
	bzip2-dev \
	curl-dev \
	enchant-dev \
	freetype-dev \
	gmp-dev \
	icu-dev \
	imap-dev \
	krb5-dev \
	libbz2 \
	libedit-dev \
	libjpeg-turbo-dev \
	libmcrypt-dev \
	libpng-dev \
	openssl-dev \
#	libressl-dev \
	libwebp-dev \
	libxml2-dev \
	libxpm-dev \
	libxslt-dev \
#	libzip-dev \
	net-snmp-dev \
	openldap-dev \
	pcre-dev \
	postgresql-dev \
	readline-dev \
	sqlite-dev
#	tidyhtml-dev
#	tidyhtml-dev@community



###
### User/Group
###
RUN set -x \
	&& addgroup -g ${MY_GID} -S ${MY_GROUP} \
	&& adduser -u ${MY_UID} -D -s /bin/bash -G ${MY_GROUP} ${MY_USER}



###
### Install PHP
###
RUN set -x \
	&& apk add --no-cache --virtual .build-deps \
		${BUILD_DEPS} \
	&& update-ca-certificates \
	\
	&& apk add --no-cache --virtual .php-build-deps \
		${PHP_BUILD_DEPS} \
	# Fix tidybuffio issue
#	&& cp /usr/include/tidybuffio.h /usr/include/buffio.h \
	\
	# Prepare src directory
	&& mkdir -p /usr/local/src \
	\
	# Install Bison
	&& cd /usr/local/src/ \
	&& wget ftp://ftp.gnu.org/pub/gnu/bison/bison-${BISON_VERSION}.tar.gz \
	&& tar xvfz bison-${BISON_VERSION}.tar.gz \
	&& cd /usr/local/src/bison-${BISON_VERSION} \
	&& ./configure --prefix=/usr \
	&& make -j$(getconf _NPROCESSORS_ONLN) \
	&& make install \
	\
	# Get PHP
	&& git clone -v https://github.com/php/php-src /usr/local/src/php-src \
	&& cd /usr/local/src/php-src \
	# Check out latest of desired git tag
	&& git tag -l --sort=version:refname "${PHP_GIT_TAG}*" \
		| grep -oE "^${PHP_GIT_TAG}[.0-9]*$" \
		| tail -1 \
		| xargs git checkout \
	# Prepare env variables
	&& gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
	&& debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)" \
	&& export CFLAGS="${PHP_CFLAGS}" \
	&& export CPPFLAGS="${PHP_CPPFLAGS}" \
	&& export LDFLAGS="${PHP_LDFLAGS}" \
	\
	&& ./buildconf --force \
	&& ./configure \
		\
# Not supported on Alpine + PHP 5.4
#		--build="${gnuArch}" \
		\
		--prefix=${PHP_PREFIX} \
		--with-config-file-path=${PHP_CONFIG_FILE_PATH} \
		--with-config-file-scan-dir=${PHP_CONFIG_FILE_SCAN_DIR} \
		--mandir=${PHP_MAN_DIR} \
		\
# Different on Alpine
#		--with-libdir="lib/${debMultiarch}" \
		\
		--enable-static=yes \
		--enable-shared=no \
		\
		--disable-cgi \
		\
		--enable-bcmath \
		--enable-calendar \
		--enable-exif \
		--enable-fpm \
		--enable-ftp \
		--enable-gd-native-ttf \
		--enable-gd-jis-conv \
		--enable-intl \
		--enable-mbstring \
		--enable-mysqlnd \
# Not available in PHP 5.4
#		--enable-opcache \
		--enable-pcntl \
		--enable-shmop \
		--enable-soap \
		--enable-sockets \
		--enable-sysvmsg \
		--enable-sysvsem \
		--enable-sysvshm \
		--enable-wddx \
# Not available in PHP 5.4
#		--enable-xmlreader \
		--enable-zip \
		\
		--with-pear \
		\
		--with-fpm-user=${MY_USER} \
		--with-fpm-group=${MY_GROUP} \
		\
		--with-freetype-dir=/usr \
		--with-iconv-dir=/usr \
		--with-icu-dir=/usr \
		--with-jpeg-dir=/usr \
		--with-libxml-dir=/usr \
		--with-openssl-dir=/usr \
		--with-pcre-dir=/usr \
		--with-png-dir=/usr \
# configure: error: Your t1lib distribution is not installed correctly.
#		--with-t1lib=/usr \
# Not supported on Alpine
#		--with-vpx-dir=/usr \
		--with-xpm-dir=/usr \
		--with-zlib-dir=/usr \
		\
		--with-bz2 \
		--with-curl \
		--with-enchant=/usr \
		--with-gd \
		--with-gettext \
		--with-gmp \
		--with-imap \
# Not supported on PHP 5.4 + Alpine
		--with-imap-ssl \
# Not supported on Alpine
#		--with-interbase=/usr \
# Not supported on PHP 5.4 + Alpine
		--with-kerberos \
		--with-ldap=/usr \
		--with-ldap-sasl=/usr \
		--with-libedit \
# Not available in PHP 5.4
#		--with-libzip=/usr \
		--with-mcrypt \
		--with-mhash \
# Not supported on Alpine
#		--with-mm \
		--with-mysql \
		--with-mysqli=mysqlnd \
		--with-openssl \
		--with-pcre-regex=/usr \
# Not supported on Alpine
#		--with-pdo-firebird \
		--with-pdo-mysql=mysqlnd \
		--with-pdo-pgsql \
		--with-pdo-sqlite \
		--with-pgsql \
		--with-pspell=/usr \
		--with-readline \
# configure: error: #recode extension can not be configured together with: imap
#		--with-recode=/usr \
		--with-snmp=/usr \
# Not supported on Alpine 3.6
#		--with-tidy \
		--with-xmlrpc \
		--with-xsl \
		--with-zlib \
	\
	# Compile and install PHP
	&& make -j$(getconf _NPROCESSORS_ONLN) \
	&& make install \
	\
	# PHP Post configuration
	&& mkdir -p ${PHP_CONFIG_FILE_PATH} \
	&& mkdir -p ${PHP_CONFIG_FILE_SCAN_DIR} \
	&& cp /usr/local/src/php-src/php.ini-development ${PHP_CONFIG_FILE_PATH}/php.ini-development \
	&& cp /usr/local/src/php-src/php.ini-production ${PHP_CONFIG_FILE_PATH}/php.ini-production \
	&& ln -sf ${PHP_CONFIG_FILE_PATH}/php.ini-development ${PHP_CONFIG_FILE_PATH}/php.ini \
	\
	# Clean-up
	&& make clean \
	\
	&& { \
		find ${PHP_PREFIX}/bin ${PHP_PREFIX}/sbin ${PHP_PREFIX}/lib -type f -perm /u+x -exec strip --strip-all '{}' + \
		|| true; \
	} \
	\
# Remove Bison
	&& cd /usr/local/src/bison-${BISON_VERSION} \
	&& make uninstall \
	&& make clean \
	\
	&& apk del .build-deps \
	\
	# Retrieve required run-time libraries
	&& RUN_TIME_LIBS="$( \
		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \
			| tr ',' '\n' \
			| sort -u \
			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
	)" \
	\
	&& apk del .php-build-deps \
	&& apk add --no-cache --virtual .php-run-deps ${RUN_TIME_LIBS} \
	\
# https://github.com/docker-library/php/issues/443
	&& pecl update-channels \
	&& cd / \
	&& rm -rf /media \
	&& rm -rf /mnt \
	&& rm -rf /opt \
	&& rm -rf /root/.pearrc \
	&& rm -rf /srv \
	&& rm -rf /tmp/* \
	&& rm -rf /usr/games \
	&& rm -rf /usr/local/games \
	&& rm -rf /usr/local/man \
	&& rm -rf /usr/local/php \
	&& rm -rf /usr/local/share \
	&& rm -rf /usr/local/src \
	&& rm -rf /usr/share/doc \
	&& rm -rf /usr/share/man \
	&& rm -rf /usr/src

# PHP/PHP-FPM Post configuration
RUN set -x \
	# php.ini
	&& sed -i'' 's/^variables_order[[:space:]]*=.*$/variables_order = "EGPCS"/g' ${PHP_CONFIG_FILE_PATH}/php.ini \
	&& grep -E '^variables_order\s*=\s*"EGPCS"$' ${PHP_CONFIG_FILE_PATH}/php.ini \
	\
	&& sed -i'' 's/^;*\s*cgi\.fix_pathinfo\s*=.*$/cgi.fix_pathinfo = 0/g' ${PHP_CONFIG_FILE_PATH}/php.ini \
	&& grep -E '^cgi\.fix_pathinfo\s*=\s*0$' ${PHP_CONFIG_FILE_PATH}/php.ini \
	\
# Not available in PHP 5.4
#	&& echo "zend_extension=opcache.so" > ${PHP_CONFIG_FILE_SCAN_DIR}/opcache.ini \
	\
	# PHP-FPM
	&& { \
		echo "[global]"; \
		echo "error_log = /proc/self/fd/2"; \
		echo "log_level = notice"; \
		echo "daemonize = no"; \
		echo "include   = ${PHP_CONFIG_FILE_PATH}/php-fpm.d/*.conf"; \
	} | tee "${PHP_CONFIG_FILE_PATH}/php-fpm.conf" \
	\
	&& if [ ! -d "${PHP_CONFIG_FILE_PATH}/php-fpm.d" ]; then \
		mkdir -p "${PHP_CONFIG_FILE_PATH}/php-fpm.d"; \
	fi \
	\
	&& if [ -f "${PHP_CONFIG_FILE_PATH}/php-fpm.d/www.conf.default" ]; then \
		mv "${PHP_CONFIG_FILE_PATH}/php-fpm.d/www.conf.default" "${PHP_CONFIG_FILE_PATH}/php-fpm.d/www.conf"; \
	else \
		{ \
			echo "[www]"; \
			echo "user = ${MY_USER}"; \
			echo "group = ${MY_GROUP}"; \
			echo "listen = 127.0.0.1:9000"; \
			echo "pm = dynamic"; \
			echo "pm.max_children = 5"; \
			echo "pm.max_spare_servers = 3"; \
			echo "pm.min_spare_servers = 1"; \
			echo "pm.start_servers = 2"; \
		} | tee ${PHP_CONFIG_FILE_PATH}/php-fpm.d/www.conf; \
	fi \
	\
	&& { \
		echo "[www]"; \
		echo "; if we send this to /proc/self/fd/1, it never appears"; \
		echo "access.log = /proc/self/fd/2"; \
		\
		echo "listen = 9000"; \
		\
		echo "; Keep env variables set by docker"; \
		echo "clear_env = no"; \
		\
		echo "; Ensure worker stdout and stderr are sent to the main error log."; \
		echo "catch_workers_output = yes"; \
	} | tee ${PHP_CONFIG_FILE_PATH}/php-fpm.d/zzz-docker.conf

# Add System tools
#RUN set -x \
#	&& apk add --no-cache shadow
# 'shadow' is not Available in Alpine 3.4 (copied from Alpine edge)
COPY ./usermod /usr/sbin/usermod
COPY ./groupmod /usr/sbin/groupmod


###
### Verify
###
RUN set -x \
	&& /usr/local/sbin/php-fpm --test \
	&& PHP_ERROR="$( php -v 2>&1 1>/dev/null )" \
	&& if [ -n "${PHP_ERROR}" ]; then echo "${PHP_ERROR}"; false; fi



###
### Copy files
###
COPY ./data/docker-entrypoint.sh /docker-entrypoint.sh
COPY ./data/docker-entrypoint.d /docker-entrypoint.d



###
### Ports
###
EXPOSE 9000



###
### Entrypoint
###
ENTRYPOINT ["/docker-entrypoint.sh"]
